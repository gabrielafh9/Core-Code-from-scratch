<h1 align="center"> Week 8 - Javascript</h1>
    
# Monday
    
## Training JS #7: if..else and ternary operator!
    
Complete function saleHotdogs/SaleHotDogs/sale_hotdogs, function accepts 1 parameter:n, n is the number of hotdogs a customer will buy, different numbers have different prices (refer to the following table), return how much money will the customer spend to buy that number of hotdogs.

``` Javascript
function saleHotdogs(n){
  if (n < 5) return n * 100
  else if (n < 10) return n * 95  
  else return n * 90  
}  
```

## Training JS #8: Conditional statement--switch

Complete the function howManydays. It accepts 1 parameter month, which means the month of the year. Different months have a different number of days as shown in the table below. Return the number of days that are in month. There is no need for input validation: month will always be greater than 0 and less than or equal to 12.

``` Javascript
function howManydays(month){
  var days;
  switch (month){
  case 2:
      days = 28;
      break;
  case 4:
      days = 30;
      break;
  case 6:
      days = 30;
      break;
  case 9:
      days = 30;
      break;
  case 11:
      days = 30;
      break;
  default:
      days = 31;
  }
  return days;
}
``` 

## Basic calculator

TODO: make a basic calculator. 

``` Javascript
function calculate(num1, operation, num2) {
  switch (operation){
      case '+':
      return num1 + num2;
      break;
      case '-':
      return num1 - num2;
      break;
      case '*':
      return num1 * num2;
      break;
      case '/':
      return num2 != 0 ? num1/num2 : null;
      break;
      default:
      return null;
      break;
  }
}
```

# Tuesday

## Even or odd

Create a function that takes an integer as an argument and returns "Even" for even numbers or "Odd" for odd numbers.

``` Javascript
function evenOrOdd(number) {
  if(number % 2 === 0) {
    return 'Even'
  } else {
    return 'Odd'
  }
}
```

## A wolf in sheep's clothing

``` Javascript
function warnTheSheep(queue) { 
  if (queue[queue.length -1] === 'wolf') { 
    return 'Pls go away and stop eating my sheep'; 
    } else { 
     let index = queue.findIndex( (x) => x == 'wolf' ); 
     return `Oi! Sheep number ${queue.length - index - 1}! You are about to be eaten by a wolf!`; 
    } 
} 
```

## Decode the code morse

``` javascript
decodeMorse = function (morseCode) {
  let phrase = [];
  let words = morseCode.trim().split('   ');
  let letters = [];
  for (let i = 0; i < words.length; i++) {
    letters = words[i].split(' ');
    for (let j = 0; j < letters.length; j++) {
      letters[j] = MORSE_CODE[letters[j]];
    }
    phrase.push(letters.join(''));
  }
  return phrase.join(' ').trim();
};
```

# Wednesday

## Who likes it?

``` Javascript
if (names.length == 0){
    return "no one likes this"
  } else if (names.length == 1){
    return names[0] + " " + "likes this"
  } else if (names.length == 2){
    return names[0] + " " + "and" + " " + names[1] + " " + "like this"
  } else if (names.length == 3){
    return names[0] +","+ " " + names[1] +" " + "and" + " " + names[2] + " " + "like this"
  } else {
    return names[0] + ", " + names[1] + " and " + (names.length - 2) + " others like this";
  }
}
```

## Bit counting

``` Javascript
var countBits = function(n) {
  // Program Me
  let binaryNumber = n.toString(2);
  let oneBitCount = 0;
  for (let i = 0; i < binaryNumber.length; i++) {
    if (binaryNumber[i] === '1') oneBitCount++;
  }
  return oneBitCount;
};
```

## Your order, please
```                               
// Your task is to sort a given string. Each word in the string will contain a single number. 
// This number is the position the word should have in the result.
// Note: Numbers can be from 1 to 9. So 1 will be the first word (not 0).
// If the input string is empty, return an empty string. 
// The words in the input String will only contain valid consecutive numbers.
```  

``` Javascript
function order(words){
   return words.split(' ').sort(function(a, b){
      return a.match(/\d/) - b.match(/\d/);
   }).join(' ');
}
```                                        
 
# Thursday
                                          
## Counting duplicates

 ```
// Write a function that will return the count of distinct case-insensitive alphabetic characters 
// and numeric digits that occur more than once in the input string. 
// The input string can be assumed to contain only alphabets (both uppercase and lowercase) and numeric digits.
```
                                          
``` Javascript
function duplicateCount(text) {
  let duplicates = 0;
  text = text.toLowerCase(); // todo minuscula
  for (let i = 0; i < text.length; i++) {
    if (text.indexOf(text[i]) !== text.lastIndexOf(text[i])) {
      duplicates++;
      text = text.replace(new RegExp(text[i], 'g'), '');
      i = i - 1;
    }
  }
  return duplicates;
}
```

